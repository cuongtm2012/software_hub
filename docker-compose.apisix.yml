version: '3.8'

services:
  # PostgreSQL Database with automatic data import
  postgres:
    image: postgres:15-alpine
    container_name: softwarehub-postgres
    platform: linux/arm64/v8  # Fix for M1/M2 Macs
    environment:
      - POSTGRES_DB=softwarehub
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/dumps:/dumps
      - ./database/scripts:/scripts
    ports:
      - "5432:5432"
    networks:
      - softwarehub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d softwarehub || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: softwarehub-redis
    platform: linux/arm64/v8  # Fix for M1/M2 Macs
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - softwarehub-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # MongoDB for chat history
  mongo:
    image: mongo:6
    container_name: softwarehub-mongo
    platform: linux/arm64/v8  # Fix for M1/M2 Macs
    environment:
      - MONGO_INITDB_DATABASE=softwarehub-chat
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo_data:/data/db
      - ./database/mongo-init:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    networks:
      - softwarehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # etcd for APISIX configuration storage
  etcd:
    image: bitnami/etcd:3.5.9
    container_name: softwarehub-etcd
    platform: linux/arm64/v8
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
    ports:
      - "2379:2379"
    networks:
      - softwarehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache APISIX API Gateway
  apisix:
    image: apache/apisix:3.7.0-debian
    container_name: softwarehub-apisix
    platform: linux/arm64/v8
    ports:
      - "80:9080"      # Main gateway port
      - "9180:9180"    # Admin API port
      - "9091:9091"    # Prometheus metrics port
    volumes:
      - ./apisix.yaml:/usr/local/apisix/conf/config.yaml:ro
    environment:
      - APISIX_STAND_ALONE=false
    depends_on:
      etcd:
        condition: service_healthy
    networks:
      - softwarehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9080/apisix/status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # APISIX Dashboard for web management
  apisix-dashboard:
    image: apache/apisix-dashboard:3.0.1-alpine
    container_name: softwarehub-apisix-dashboard
    platform: linux/arm64/v8
    ports:
      - "9000:9000"
    volumes:
      - ./apisix-dashboard.yaml:/usr/local/apisix-dashboard/conf/conf.yaml:ro
    depends_on:
      etcd:
        condition: service_healthy
    networks:
      - softwarehub-network
    restart: unless-stopped

  # Email Microservice
  email-service:
    build:
      context: ./services/email-service
      dockerfile: Dockerfile
      platforms:
        - linux/arm64/v8  # Fix for M1/M2 Macs
    container_name: softwarehub-email-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL:-noreply@yourdomain.com}
      - SMTP_HOST=${SMTP_HOST:-smtp.sendgrid.net}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-apikey}
      - SMTP_PASS=${SMTP_PASS:-${SENDGRID_API_KEY}}
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - softwarehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Chat Microservice
  chat-service:
    build:
      context: ./services/chat-service
      dockerfile: Dockerfile
      platforms:
        - linux/arm64/v8  # Fix for M1/M2 Macs
    container_name: softwarehub-chat-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - CLIENT_URL=http://softwarehub-app:5000
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://admin:password@mongo:27017/softwarehub-chat?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - softwarehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Microservice
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
      platforms:
        - linux/arm64/v8  # Fix for M1/M2 Macs
    container_name: softwarehub-notification-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - FCM_VAPID_KEY=${FCM_VAPID_KEY:-}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID:-}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL:-}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY:-}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/softwarehub
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - softwarehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker Microservice for background tasks
  worker-service:
    build:
      context: ./services/worker-service
      dockerfile: Dockerfile
      platforms:
        - linux/arm64/v8  # Fix for M1/M2 Macs
    container_name: softwarehub-worker-service
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - EMAIL_SERVICE_URL=http://email-service:3001
      - NOTIFICATION_SERVICE_URL=http://notification-service:3003
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/softwarehub
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      email-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    networks:
      - softwarehub-network
    restart: unless-stopped

  # Main SoftwareHub Application (API Gateway + Frontend)
  softwarehub-app:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/arm64/v8  # Fix for M1/M2 Macs
    container_name: softwarehub-app
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/softwarehub
      - SESSION_SECRET=${SESSION_SECRET:-your-super-secret-session-key}
      
      # Microservice URLs - Updated for APISIX routing
      - EMAIL_SERVICE_URL=http://apisix:9080
      - CHAT_SERVICE_URL=http://apisix:9080
      - NOTIFICATION_SERVICE_URL=http://apisix:9080
      - NGINX_URL=http://apisix:9080
      
      # External Service Configurations
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL:-noreply@yourdomain.com}
      - FCM_VAPID_KEY=${FCM_VAPID_KEY:-}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID:-}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL:-}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY:-}
      
      # Storage Configuration
      - CLOUDFLARE_R2_ACCESS_KEY_ID=${CLOUDFLARE_R2_ACCESS_KEY_ID:-}
      - CLOUDFLARE_R2_SECRET_ACCESS_KEY=${CLOUDFLARE_R2_SECRET_ACCESS_KEY:-}
      - CLOUDFLARE_R2_BUCKET_NAME=${CLOUDFLARE_R2_BUCKET_NAME:-}
      - CLOUDFLARE_R2_ENDPOINT=${CLOUDFLARE_R2_ENDPOINT:-}
      
      # Cache and Queue
      - REDIS_URL=redis://redis:6379
      
      # Payment Configuration
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      email-service:
        condition: service_healthy
      chat-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      apisix:
        condition: service_healthy
    networks:
      - softwarehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Database backup service
  postgres-backup:
    image: postgres:15-alpine
    container_name: softwarehub-backup
    platform: linux/arm64/v8  # Fix for M1/M2 Macs
    environment:
      - PGPASSWORD=password
    volumes:
      - ./database/backups:/backups
      - ./database/scripts:/scripts
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - softwarehub-network
    command: >
      sh -c "
        echo 'Backup service started. Waiting for first backup in 24 hours...';
        while true; do
          sleep 86400;
          echo 'Creating backup...';
          pg_dump -h postgres -U postgres -d softwarehub > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql;
          echo 'Backup completed. Cleaning old backups...';
          find /backups -name '*.sql' -mtime +7 -delete;
          echo 'Cleanup completed.';
        done
      "
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongo_data:
    driver: local

networks:
  softwarehub-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16